<ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets">
	
	<h:outputScript name="jsf.js" library="javax.faces" target="head" />
    <h:form styleClass="navbar-form navbar-right" prependId="false" id="userPanel">
		<!-- USER NOT LOGEDD IN -->
		<h:panelGroup rendered="#{userBean.loginRequired}" id="loginRequiredGroup">
			<h:inputText value="#{userBean.username}" pt:placeholder="Username" id="loginField" styleClass="form-control"></h:inputText>
			&#160; <!-- ugly fix for now -->
			<h:inputSecret value="#{userBean.password}" pt:placeholder="Password" id="passwordField" styleClass="form-control"></h:inputSecret>
			&#160; <!-- ugly fix for now -->
			<h:commandButton value="Login" styleClass='btn btn-default navbar-btn'>
				<!-- execute="@all" saves the values of all fields in the bean, the listener calls the method
				login inside the userBean bean and the render flag tells the userInfoContainer to render
				the component again. It's important that we always render the next higher level component.
				Edit: Switched to using @all so that we can remove the register info if the person clicked that
				 -->
				<f:ajax execute="@all" listener="#{userBean.login}" render="@all"/>
			</h:commandButton>
			&#160; <!-- ugly fix for now -->
			<h:commandButton value="Register" styleClass='btn btn-default navbar-btn'>
				<f:ajax listener="#{userBean.showRegisterPanel}" render="@all"/>
			</h:commandButton>
		</h:panelGroup>
		
		<!-- USER LOGEDD IN -->
		<h:panelGroup rendered="#{userBean.loggedIn}" id="loggedInGroup">
			<h:outputText value="Hello "></h:outputText>
			<h:outputText value="#{userBean.username}"></h:outputText>
			<h:commandButton value="Logout" action="#{userBean.logout}" styleClass='btn btn-default navbar-btn'></h:commandButton>
		</h:panelGroup>
	</h:form>
	<script src="/RedditClone/js/bootstrap.min.js"></script>
</ui:composition>
